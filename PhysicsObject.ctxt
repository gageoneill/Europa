#BlueJ class context
comment0.params=x\ y
comment0.target=void\ setLocation(int,\ int)
comment1.params=x\ y
comment1.target=void\ setLocation(double,\ double)
comment1.text=\r\n\ Assigns\ a\ new\ location\ for\ this\ actor.\ The\ new\ coordinates\ will\ be\ rounded\r\n\ to\ the\ nearest\ integer\ and\ passed\ to\ {@link\ Actor\#setLocation(int,int)}.\r\n\ \r\n\ @param\ x\r\n\ \ \ \ \ \ the\ new\ x-location\r\n\ @param\ y\r\n\ \ \ \ \ \ the\ new\ y-location\r\n
comment10.params=
comment10.target=double\ getVelocityX()
comment10.text=\r\n\ Gets\ the\ x-component\ of\ this\ object's\ velocity.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ this\ object's\ x-velocity\r\n
comment11.params=
comment11.target=double\ getVelocityY()
comment11.text=\r\n\ Gets\ the\ y-component\ of\ this\ object's\ velocity.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ this\ object's\ y-velocity\r\n
comment12.params=
comment12.target=double\ getSpeed()
comment12.text=\r\n\ Gets\ the\ speed\ of\ this\ object.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ the\ current\ speed\ (magnitude\ of\ velocity)\r\n
comment13.params=maxSpeed
comment13.target=void\ setMaxSpeed(double)
comment13.text=\r\n\ Sets\ the\ maximum\ speed\ of\ this\ object.\r\n\ \r\n\ @param\ maxSpeed\r\n\ \ \ \ \ \ the\ new\ maximum\ speed,\ or\ a\ negative\ value\ to\ indicate\ that\r\n\ \ \ \ \ \ there\ should\ not\ be\ any\ maximum\ speed\r\n\ @see\ \#maxSpeed\r\n
comment14.params=
comment14.target=double\ getMaxSpeed()
comment14.text=\r\n\ Gets\ the\ maximum\ speed\ of\ this\ object.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ the\ maximum\ speed\r\n\ @see\ \#maxSpeed\r\n
comment15.params=
comment15.target=double\ getPreciseRotation()
comment15.text=\r\n\ Gets\ this\ object's\ rotation\ as\ a\ decimal\ value.\r\n
comment16.params=omega
comment16.target=void\ setAngularVelocity(double)
comment16.text=\r\n\ Sets\ this\ object's\ angular\ velocity.\r\n\ \r\n\ @param\ omega\r\n\ \ \ \ \ \ the\ new\ angular\ velocity,\ in\ degrees/second,\ where\ positive\ values\r\n\ \ \ \ \ \ indicate\ clockwise\ rotation\r\n\ @see\ \#omega\r\n
comment17.params=
comment17.target=double\ getAngularVelocity()
comment17.text=\r\n\ Gets\ this\ object's\ angular\ velocity.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ the\ angular\ velocity,\ in\ degrees/second,\ where\ positive\ values\r\n\ \ \ \ \ \ indicate\ clockwise\ rotation\r\n\ @see\ \#omega\r\n
comment18.params=domega
comment18.target=void\ increaseAngularVelocity(double)
comment18.text=\r\n\ Increases\ this\ object's\ angular\ velocity\ by\ the\ given\ amount.\r\n\ \r\n\ @param\ domega\r\n\ \ \ \ \ \ the\ increase\ of\ angular\ velocity,\ in\ degrees/frame,\ where\r\n\ \ \ \ \ \ positive\ values\ indicate\ clockwise\ rotation\r\n\ \ \ \ \ \ (stands\ for\ &Delta;&omega;)\r\n
comment19.params=maxAngularSpeed
comment19.target=void\ setMaxAngularSpeed(double)
comment19.text=\r\n\ Sets\ the\ maximum\ angular\ speed\ of\ this\ object.\r\n\ \r\n\ @param\ maxAngularSpeed\r\n\ \ \ \ \ \ the\ new\ maximum\ angular\ speed,\ or\ a\ negative\ value\ to\ indicate\ that\r\n\ \ \ \ \ \ there\ should\ not\ be\ any\ maximum\ angular\ speed\r\n\ @see\ \#maxAngularSpeed\r\n
comment2.params=theta
comment2.target=void\ setRotation(int)
comment20.params=
comment20.target=double\ getMaxAngularSpeed()
comment20.text=\r\n\ Gets\ the\ maximum\ angular\ speed\ of\ this\ object.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ the\ maximum\ angular\ speed\r\n\ @see\ \#maxAngularSpeed\r\n
comment21.params=linearDamping
comment21.target=void\ setLinearDamping(double)
comment21.text=\r\n\ Sets\ the\ linear\ damping\ value.\ The\ velocity\ will\ be\ multiplied\ by\ this\r\n\ value\ after\ each\ frame.\r\n\ \r\n\ @see\ \#linearDamping\r\n
comment22.params=
comment22.target=double\ getLinearDamping()
comment22.text=\r\n\ Gets\ the\ current\ linear\ damping\ value.\r\n\ \r\n\ @see\ \#linearDamping\r\n
comment23.params=angularDamping
comment23.target=void\ setAngularDamping(double)
comment23.text=\r\n\ Sets\ the\ angular\ damping\ value.\ The\ angular\ velocity\ will\ be\ multiplied\r\n\ by\ this\ value\ after\ each\ frame.\r\n\ \r\n\ @see\ \#angularDamping\r\n
comment24.params=
comment24.target=double\ getAngularDamping()
comment24.text=\r\n\ Gets\ the\ current\ angular\ damping\ value.\r\n\ \r\n\ @see\ \#angularDamping\r\n
comment25.params=
comment25.target=void\ moveByVelocity()
comment25.text=\r\n\ Moves\ this\ object\ according\ to\ its\ velocity\ value.\r\n
comment26.params=
comment26.target=void\ applyDamping()
comment26.text=\r\n\ Applies\ damping,\ as\ described\ in\ the\ documentation\ for\ the\ damping\ variables.\r\n\ \r\n\ @see\ \#linearDamping\r\n\ @see\ \#angularDamping\r\n
comment27.params=
comment27.target=void\ clampMaxSpeed()
comment27.text=\r\n\ Slows\ this\ object\ down\ if\ it\ is\ going\ too\ fast.\r\n\ \r\n\ @see\ \#maxSpeed\r\n
comment28.params=
comment28.target=void\ clampMaxAngularSpeed()
comment28.text=\r\n\ Slows\ this\ object\ down\ if\ it\ is\ rotating\ too\ fast.\r\n\ \r\n\ @see\ \#maxAngularSpeed\r\n
comment29.params=
comment29.target=void\ act()
comment3.params=theta
comment3.target=void\ setRotation(double)
comment3.text=\r\n\ Assigns\ a\ new\ rotation\ for\ this\ actor.\ The\ new\ rotation\ will\ be\ rounded\r\n\ to\ the\ nearest\ integer\ and\ passed\ to\ {@link\ Actor\#setRotation(int)}.\r\n\ \r\n\ @param\ theta\r\n\ \ \ \ \ \ the\ new\ rotation,\ in\ degrees,\ where\ zero\ is\ due\ east\ and\ positive\r\n\ \ \ \ \ \ values\ indicate\ clockwise\ rotation\r\n
comment30.params=w
comment30.target=void\ addedToWorld(greenfoot.World)
comment4.params=
comment4.target=double\ getPreciseX()
comment4.text=\r\n\ Gets\ this\ object's\ x-position\ as\ a\ decimal\ value.\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ this\ object's\ x-position\r\n
comment5.params=
comment5.target=double\ getPreciseY()
comment5.text=\r\n\ Gets\ this\ object's\ y-position\ as\ a\ decimal\ value.\r\n
comment6.params=vx\ vy
comment6.target=void\ setVelocity(double,\ double)
comment6.text=\r\n\ Sets\ the\ velocity\ of\ this\ object,\ overriding\ the\ current\ velocity.\r\n\ \r\n\ @param\ vx\r\n\ \ \ \ \ \ the\ new\ x-velocity\r\n\ @param\ vy\r\n\ \ \ \ \ \ the\ new\ y-velocity\r\n
comment7.params=dvx\ dvy
comment7.target=void\ increaseVelocity(double,\ double)
comment7.text=\r\n\ Increases\ the\ velocity\ by\ the\ given\ value\ on\ each\ axis.\r\n\ This\ is\ equivalent\ to\ calling\:\r\n\ <pre><code>setVelocity(getVelocityX()\ +\ dvx,\ getVelocityY()\ +\ dvy);</code></pre>\r\n\ \r\n\ @param\ dvx\r\n\ \ \ \ \ \ the\ change\ in\ x-velocity\ (stands\ for\ &Delta;<i>v<sub>x</sub></i>)\r\n\ @param\ dvy\r\n\ \ \ \ \ \ the\ change\ in\ y-velocity\ (stands\ for\ &Delta;<i>v<sub>y</sub></i>)\r\n
comment8.params=r\ theta
comment8.target=void\ increaseVelocityPolar(double,\ double)
comment8.text=\r\n\ Increases\ the\ velocity\ by\ the\ given\ magnitude\ in\ the\ given\ direction.\r\n\ You\ can\ think\ of\ this\ as\ "pushing"\ this\ object\ in\ a\ certain\ direction.\r\n\ \r\n\ @param\ r\r\n\ \ \ \ \ \ the\ magnitude\ (radius)\ of\ the\ increase\ of\ velocity\r\n\ @param\ theta\r\n\ \ \ \ \ \ the\ direction\ (angle)\ of\ the\ increase\ of\ velocity,\ in\ degrees,\r\n\ \ \ \ \ \ where\ zero\ is\ due\ east\ and\ positive\ values\ are\ clockwise\r\n
comment9.params=r
comment9.target=void\ increaseVelocityForward(double)
comment9.text=\r\n\ Increases\ the\ velocity\ by\ the\ given\ magnitude\ in\ the\ current\ direction.\r\n\ You\ can\ think\ of\ this\ as\ "pushing"\ the\ object\ in\ the\ direction\ it's\ facing.\r\n\ \r\n\ @param\ r\r\n\ \ \ \ \ \ the\ magnitude\ of\ the\ increase\ of\ velocity\r\n
numComments=31
